* symon.el

コンパクトでおしゃれなシステムモニター

tiny graphical system monitor

** Screencast

[[img/screenshot.png]]

** NOTE: RECENT VISIBLE CHANGES

- =symon-initialize= is now obsolete (use =symon-mode= instead)
- =symon-fetcher= is now obsolete (use =symon-monitors= instead)

** Usage

Load =symon=

: (require 'symon)

and turn on =symon-mode=.

: (symon-mode)

then a tiny system monitor is displayed in minibuffer, during idle.

** Customization

- =symon-monitors= :: List of symon monitors used to fetch system
     statuses. You can set this variable to specify what metrics to
     display and what to not. List of available monitors is provided
     below.

- =symon-refresh-rate= :: Refresh rate of symon display.

- =symon-delay= :: Delay in seconds until symon is displayed.

- =symon-history-size= :: Number of old values to keep. Sparklines
     grow faster when set smaller.

You need to setup all these 4 variables before activating
=symon-mode=.

- =symon-sparkline-size= :: =(WIDTH . HEIGHT)= of sparkline.

** Provided Monitors

- GNU/Linux

  - =symon-linux-memory-monitor= :: memory usage (%) and swapped
       memory (MB) via =/proc/meminfo=

  - =symon-linux-cpu-monitor= :: CPU load (%) via =/proc/stat=

  - =symon-linux-battery-monitor= :: remaining battery (%) via
       built-in library =battery.el=

  - =symon-linux-network-rx-monitor= :: network RX (KB/s) via
       =/proc/net/dev=

  - =symon-linux-network-tx-monitor= :: network TX (KB/s) via
       =/proc/net/dev=

- Windows

  - =symon-windows-memory-monitor= :: memory usage (%) and page file
       usage (MB) via =WMI=

  - =symon-windows-cpu-monitor= :: CPU load (%) via =WMI=

  - =symon-windows-battery-monitor= :: remaining battery (%) via =WMI=

  - =symon-windows-network-rx-monitor= :: network RX (KB/s) via =WMI=

  - =symon-windows-network-tx-monitor= :: network TX (KB/s) via =WMI=

- misc

  - =symon-current-time-monitor= :: current Time (hh::mm)

** NOTE

This is still a beta project.

May have some bugs, and APIs are volatile.

Contributions are welcome!
